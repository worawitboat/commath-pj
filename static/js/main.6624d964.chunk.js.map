{"version":3,"sources":["logo.svg","views/main.js","views/b2s.js","functions/function.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","navigate","useNavigate","className","style","marginTop","Row","Col","sm","Card","CardTitle","CardText","Button","onClick","color","disabled","B2s","useState","bit2string","setBit2string","result","setResult","class","alignItems","Input","marginBottom","width","value","type","name","id","onChange","e","target","b2s","axios","get","then","response","console","log","data","catch","err","res","routes","path","element","App","routing","useRoutes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6624d964.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { CardTitle, CardText, Row, Col, Button, Card } from \"reactstrap\";\r\nimport \"../App.css\";\r\n// import { Link } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\nfunction Main() {\r\n  const navigate = useNavigate();\r\n\r\n  const nextPage = () => {\r\n    navigate(\"/b2s\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-center\" style={{ marginTop: \"5%\" }}>\r\n        เลือก\r\n      </h1>\r\n      <Row style={{ marginTop: \"5%\" }}>\r\n        <Col sm=\"2\"></Col>\r\n\r\n        <Col sm=\"8\">\r\n          <div className=\"text-center\">\r\n            <Row>\r\n              <Col sm=\"6\">\r\n                <Card>\r\n                  <CardTitle>\r\n                    <h3 style={{ marginTop: \"10px\" }}>บทที่ 1</h3>\r\n                  </CardTitle>\r\n                  <CardText>\r\n                    <h4>แปลงเลขฐาน 2</h4>\r\n                  </CardText>\r\n                 \r\n                    <Button onClick={nextPage} color=\"primary\">\r\n                      <h3 style={{ marginTop: \"10px\" }}>เริ่ม</h3>\r\n                    </Button>\r\n                  \r\n                </Card>\r\n              </Col>\r\n\r\n              <Col sm=\"6\">\r\n                <Card>\r\n                  <CardTitle>\r\n                    <h3 style={{ marginTop: \"10px\" }}>บทที่ 2</h3>\r\n                  </CardTitle>\r\n                  <CardText>\r\n                    <h4>.</h4>\r\n                  </CardText>\r\n                  <Button disabled>\r\n                    <h3 style={{ marginTop: \"10px\" }}>เริ่ม</h3>\r\n                  </Button>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row className=\"text-center\" style={{ marginTop: \"20px\" }}>\r\n              <Col sm=\"6\">\r\n                <Card>\r\n                  <CardTitle>\r\n                    <h3 style={{ marginTop: \"10px\" }}>บทที่ 3</h3>\r\n                  </CardTitle>\r\n                  <CardText>\r\n                    <h4>.</h4>\r\n                  </CardText>\r\n                  <Button disabled>\r\n                    <h3 style={{ marginTop: \"10px\" }}>เริ่ม</h3>\r\n                  </Button>\r\n                </Card>\r\n              </Col>\r\n\r\n              <Col sm=\"6\">\r\n                <Card>\r\n                  <CardTitle>\r\n                    <h3 style={{ marginTop: \"10px\" }}>บทที่ 4</h3>\r\n                  </CardTitle>\r\n                  <CardText>\r\n                    <h4>.</h4>\r\n                  </CardText>\r\n                  <Button disabled>\r\n                    <h3 style={{ marginTop: \"10px\" }}>เริ่ม</h3>\r\n                  </Button>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </Col>\r\n        <Col sm=\"2\"></Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  CardTitle,\r\n  CardText,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Card,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n} from \"reactstrap\";\r\nimport \"../App.css\";\r\nimport { getB2s } from \"../functions/function\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction B2s() {\r\n  const navigate = useNavigate();\r\n  const [bit2string, setBit2string] = useState();\r\n  const [result, setResult] = useState(\"\");\r\n  const generate = () => {\r\n    getB2s(bit2string).then((res) => {\r\n      setResult(res);\r\n    });\r\n  };\r\n  \r\n  const back = () => {\r\n    navigate(\"/\");\r\n  }\r\n\r\n  return (\r\n    <div class=\"body\">\r\n      <Row style={{ marginTop: \"15%\" }}>\r\n        <Col sm=\"2\"></Col>\r\n        <Col sm=\"8\">\r\n          <div>\r\n            <Row>\r\n              <Col sm=\"2\"></Col>\r\n              <Col sm=\"8\">\r\n                <Card style={{ alignItems: \"center\" }}>\r\n                  <CardTitle>\r\n                    <h2 style={{ marginTop: \"10px\" }}>เลขฐาน 2</h2>\r\n                  </CardTitle>\r\n                  <Input\r\n                    style={{\r\n                      marginTop: \"20px\",\r\n                      marginBottom: \"20px\",\r\n                      width: 500,\r\n                    }}\r\n                    value={bit2string}\r\n                    type=\"text\"\r\n                    name=\"bit2string\"\r\n                    id=\"bit2string\"\r\n                    onChange={(e) => setBit2string(e.target.value)}\r\n                  />\r\n                  <h4>ผลลัพธ์: {result}</h4>\r\n                  <Row>\r\n                    <Col sm=\"8\">\r\n                      <Button onClick={generate} color=\"primary\">\r\n                        <div style={{ width: 300 }}>\r\n                          <h3 style={{ marginTop: \"10px\" }}>แปลง</h3>\r\n                        </div>\r\n                      </Button>\r\n                    </Col>\r\n                    <Col sm=\"4\">\r\n                      <Button onClick={back} color=\"secondary\">\r\n                        <div style={{ width: 100 }}>\r\n                          <h3 style={{ marginTop: \"10px\" }}>กลับ</h3>\r\n                        </div>\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n              <Col sm=\"2\"></Col>\r\n            </Row>\r\n          </div>\r\n        </Col>\r\n        <Col sm=\"2\"></Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default B2s;\r\n","import axios from \"axios\";\r\n\r\nconst apiHost = \"http://127.0.0.1:8000\";\r\n\r\nexport const getB2s = (b2s) => {\r\n    return axios\r\n        .get(apiHost + `/b2s/${b2s}`)\r\n        .then(response => {\r\n            console.log(response.data);\r\n            return response.data;\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n};","import React from \"react\";\r\n// import { Navigate } from 'react-router-dom';\r\nimport Main from \"./views/main\";\r\nimport B2s from \"./views/b2s\";\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/\",\r\n    element: <Main />,\r\n  },\r\n  {\r\n    path: \"commath-pj\",\r\n    element: <Main />,\r\n  },\r\n  {\r\n    path: \"b2s\",\r\n    element: <B2s />,\r\n  },\r\n];\r\n\r\nexport default routes;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport routes from \"./routes\";\nimport { useRoutes } from \"react-router-dom\";\n\nconst App = () => {\n  const routing = useRoutes(routes);\n  return <div>{routing}</div>;\n  // <div className=\"App\">\n  //   <header className=\"App-header\">\n  //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //     <p>\n  //       Edit <code>src/App.js</code> and save to reload.\n  //     </p>\n  //     <a\n  //       className=\"App-link\"\n  //       href=\"https://reactjs.org\"\n  //       target=\"_blank\"\n  //       rel=\"noopener noreferrer\"\n  //     >\n  //       Learn React\n  //     </a>\n  //   </header>\n  // </div>\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}